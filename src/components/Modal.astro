---
interface Props {
	id: string;
	pdfUrl: string;
}

const { id, pdfUrl } = Astro.props;
---

<dialog id={id} class="modal">
	<div class="modal-content">
		<button class="close-button" onclick="this.closest('dialog').close()">Ã—</button>
		<iframe src={pdfUrl} width="100%" height="100%" style="border: none;"></iframe>
	</div>
</dialog>

<style>
	.modal {
		padding: 0;
		max-width: 90vw;
		max-height: 90vh;
		border: none;
		border-radius: 0.75rem;
		background: var(--gray-999);
		box-shadow: var(--shadow-lg);
	}

	.modal::backdrop {
		background: rgba(0, 0, 0, 0.5);
	}

	.modal[open] {
		animation: fade-in 0.3s ease-out;
	}

	.modal-content {
		position: relative;
		width: 90vw;
		height: 90vh;
		padding: 1rem;
	}

	.close-button {
		position: absolute;
		top: 0.5rem;
		right: 0.5rem;
		width: 2rem;
		height: 2rem;
		display: flex;
		align-items: center;
		justify-content: center;
		border: none;
		background: var(--gray-999);
		border-radius: 50%;
		color: var(--gray-200);
		font-size: 1.5rem;
		cursor: pointer;
		transition: color var(--theme-transition);
		z-index: 1;
	}

	.close-button:hover,
	.close-button:focus {
		color: var(--gray-0);
	}

	@keyframes fade-in {
		from {
			opacity: 0;
			transform: translateY(-10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}
</style>

<script>
	// Close modal when clicking outside
	document.addEventListener('click', (e) => {
		const dialogs = document.querySelectorAll('dialog');
		dialogs.forEach((dialog) => {
			const rect = dialog.getBoundingClientRect();
			const isInDialog = (rect.top <= e.clientY && e.clientY <= rect.top + rect.height &&
				rect.left <= e.clientX && e.clientX <= rect.left + rect.width);
			if (dialog.open && !isInDialog) {
				dialog.close();
			}
		});
	});
</script> 